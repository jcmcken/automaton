#!/bin/bash

CONFIG=${AUTOMATON_CONFIG:-/etc/sysconfig/automaton}
MODULEPATH=${AUTOMATON_MODULEPATH:-/etc/puppet/modules}

if [ $(id -u) -eq 0 ]; then
  LOG_FILE=/var/log/automaton.log
else
  mkdir -p ~/.automaton
  LOG_FILE=~/.automaton/automaton.log
fi

[ -f $CONFIG ] && . $CONFIG

[ "$SHELL_DEBUG" == 'true' ] && set -x

function usage() {
  cat << EOF
usage: automaton <puppet_class> [parameters ...]
EOF
}

function log() {
  echo "[$(date)] automaton: $1"
}

function abort() {
  echo " error: ${1:-unknown error}" && exit 1
}

function check_if_installed() {
  ! which $1 &> /dev/null && abort "could not locate '$1', is it installed?"
}

function create_hiera_config() {
  cat << EOF
---
:backends:
  - yaml
:yaml:
  :datadir: $1
:hierarchy: common
EOF
}

function main() {
  for i in jgen puppet hiera; do
    check_if_installed $i
  done

  TMPDIR=$(mktemp -d)
  HIERADATADIR=$TMPDIR/data
  HIERACONFIG=$TMPDIR/hiera.yaml
  HIERADATAFILE=$HIERADATADIR/common.yml
  trap "rm -rf $TMPDIR" exit
  mkdir -p $HIERADATADIR

  PUPPET_CLASS=$1 && shift
  DATA_ARGS=$@

  [ -z "$PUPPET_CLASS" ] && abort "must supply a puppet class to run"

  [ -n "$LOG_FILE" ] && exec 3>&1 4>&2 >> $LOG_FILE 2>&1

  log 'info: generating hiera datafile'
  jgen $DATA_ARGS --prefix "$PUPPET_CLASS::" --pretty-print \
      --yaml >> $HIERADATAFILE

  log 'info: generating hiera configuration'
  create_hiera_config $HIERADATADIR > $HIERACONFIG

  log "info: apply puppet modules"
  log "info: class is '$PUPPET_CLASS'"
  log "info: modulepath is '$MODULEPATH'"
  log "info: options are '$PUPPET_OPTS'"
  puppet apply --detailed-exitcodes --hiera_config $HIERACONFIG \
      --modulepath $MODULEPATH $PUPPET_OPTS -e "include $PUPPET_CLASS"
  RET=$?
  log "info: finished puppet run"

  [ -n "$LOG_FILE" ] && exec 1>&3 2>&4

  [ $RET -eq 0 ] || [ $RET -eq 2 ] && exit 0

  [ $RET -eq 4 ] || [ $RET -eq 6 ] && \
    echo 'automaton: error: failed to apply modules!' >&2  && exit 1
}

main $@
